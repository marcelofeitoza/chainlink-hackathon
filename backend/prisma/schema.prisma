generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @unique()
  address   String   @unique
  email     String   @unique
  name      String?
  password  String
  username  String   @unique
  imgAddress String  @default("0x000000000000000000")
  imgUrl     String  @default("https://imgur.com/iTMChMH.png")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     Post[]
  likes     Likes[]
  comments  Comment[]
  proposals Proposal[]
}

model Post {
  id          String   @id @unique()
  address     String
  description String
  image       String?
  isNFT       Boolean  @default(false)
  unlisted    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId    String
  likes       Likes[]
  comments    Comment[]
  proposals   Proposal[]
}

model Likes {
  id        String   @id @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  type      String
}

model Comment {
  id        String   @id @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String
  text      String
}

model Proposal {
  id        String   @id @unique()
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   String   @unique
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId  String
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  postId    String?
  prLink    String?
  text      String
  status    String
  options   Option[]
  open      Boolean  @default(true)
}

model Option {
  id          Int   @id  @default(autoincrement())
  title       String
  votes       String[]
  proposalId  String
  proposal    Proposal @relation(fields: [proposalId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}