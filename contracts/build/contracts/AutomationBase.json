{
  "contractName": "AutomationBase",
  "abi": [
    {
      "inputs": [],
      "name": "OnlySimulatedBackend",
      "type": "error"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"OnlySimulatedBackend\",\"type\":\"error\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/node_modules/@chainlink/contracts/src/v0.8/AutomationBase.sol\":\"AutomationBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/node_modules/@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3613ee132e1f05b3e23955db6a849966487fab8ea33e9bb70d6f038fc48c0608\",\"dweb:/ipfs/QmRgdumWFMX35vSrZpCCvXDTvRBVXRkexnxoZqqfnGisnZ\"]}},\"version\":1}",
  "bytecode": "0x6080604052348015600e575f80fd5b50603e80601a5f395ff3fe60806040525f80fdfea26469706673582212205ee0bfa745c9e0e502a6fc39e695f2731dd75a4d7d307fe6761b4c778f1184be64736f6c63430008140033",
  "deployedBytecode": "0x60806040525f80fdfea26469706673582212205ee0bfa745c9e0e502a6fc39e695f2731dd75a4d7d307fe6761b4c778f1184be64736f6c63430008140033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "57:515:6:-:0;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "57:515:6:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract AutomationBase {\n  error OnlySimulatedBackend();\n\n  /**\n   * @notice method that allows it to be simulated via eth_call by checking that\n   * the sender is the zero address.\n   */\n  function preventExecution() internal view {\n    if (tx.origin != address(0)) {\n      revert OnlySimulatedBackend();\n    }\n  }\n\n  /**\n   * @notice modifier that allows it to be simulated via eth_call by checking\n   * that the sender is the zero address.\n   */\n  modifier cannotExecute() {\n    preventExecution();\n    _;\n  }\n}\n",
  "sourcePath": "/home/victorcarvalho/Documents/Github/ChainlinkHackas/chainlink-hackathon/contracts/node_modules/@chainlink/contracts/src/v0.8/AutomationBase.sol",
  "ast": {
    "absolutePath": "project:/node_modules/@chainlink/contracts/src/v0.8/AutomationBase.sol",
    "exportedSymbols": {
      "AutomationBase": [
        1003
      ]
    },
    "id": 1004,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 975,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "32:23:6"
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "AutomationBase",
        "contractDependencies": [],
        "contractKind": "contract",
        "fullyImplemented": true,
        "id": 1003,
        "linearizedBaseContracts": [
          1003
        ],
        "name": "AutomationBase",
        "nameLocation": "66:14:6",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "errorSelector": "b60ac5db",
            "id": 977,
            "name": "OnlySimulatedBackend",
            "nameLocation": "91:20:6",
            "nodeType": "ErrorDefinition",
            "parameters": {
              "id": 976,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "111:2:6"
            },
            "src": "85:29:6"
          },
          {
            "body": {
              "id": 993,
              "nodeType": "Block",
              "src": "290:83:6",
              "statements": [
                {
                  "condition": {
                    "commonType": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "id": 987,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftExpression": {
                      "expression": {
                        "id": 981,
                        "name": "tx",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967270,
                        "src": "300:2:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_transaction",
                          "typeString": "tx"
                        }
                      },
                      "id": 982,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberLocation": "303:6:6",
                      "memberName": "origin",
                      "nodeType": "MemberAccess",
                      "src": "300:9:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "BinaryOperation",
                    "operator": "!=",
                    "rightExpression": {
                      "arguments": [
                        {
                          "hexValue": "30",
                          "id": 985,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "321:1:6",
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          }
                        ],
                        "id": 984,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "313:7:6",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 983,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "313:7:6",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 986,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "nameLocations": [],
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "313:10:6",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "300:23:6",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 992,
                  "nodeType": "IfStatement",
                  "src": "296:73:6",
                  "trueBody": {
                    "id": 991,
                    "nodeType": "Block",
                    "src": "325:44:6",
                    "statements": [
                      {
                        "errorCall": {
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 988,
                            "name": "OnlySimulatedBackend",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 977,
                            "src": "340:20:6",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_error_pure$__$returns$__$",
                              "typeString": "function () pure"
                            }
                          },
                          "id": 989,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "nameLocations": [],
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "340:22:6",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 990,
                        "nodeType": "RevertStatement",
                        "src": "333:29:6"
                      }
                    ]
                  }
                }
              ]
            },
            "documentation": {
              "id": 978,
              "nodeType": "StructuredDocumentation",
              "src": "118:127:6",
              "text": " @notice method that allows it to be simulated via eth_call by checking that\n the sender is the zero address."
            },
            "id": 994,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "preventExecution",
            "nameLocation": "257:16:6",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 979,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "273:2:6"
            },
            "returnParameters": {
              "id": 980,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "290:0:6"
            },
            "scope": 1003,
            "src": "248:125:6",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1001,
              "nodeType": "Block",
              "src": "534:36:6",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 997,
                      "name": "preventExecution",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 994,
                      "src": "540:16:6",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$__$returns$__$",
                        "typeString": "function () view"
                      }
                    },
                    "id": 998,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "nameLocations": [],
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "540:18:6",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 999,
                  "nodeType": "ExpressionStatement",
                  "src": "540:18:6"
                },
                {
                  "id": 1000,
                  "nodeType": "PlaceholderStatement",
                  "src": "564:1:6"
                }
              ]
            },
            "documentation": {
              "id": 995,
              "nodeType": "StructuredDocumentation",
              "src": "377:129:6",
              "text": " @notice modifier that allows it to be simulated via eth_call by checking\n that the sender is the zero address."
            },
            "id": 1002,
            "name": "cannotExecute",
            "nameLocation": "518:13:6",
            "nodeType": "ModifierDefinition",
            "parameters": {
              "id": 996,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "531:2:6"
            },
            "src": "509:61:6",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1004,
        "src": "57:515:6",
        "usedErrors": [
          977
        ],
        "usedEvents": []
      }
    ],
    "src": "32:541:6"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.20+commit.a1b79de6.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.14",
  "updatedAt": "2023-06-09T05:31:43.324Z",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}